<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JSP</title>
    <link href="/2023/10/26/JSP/"/>
    <url>/2023/10/26/JSP/</url>
    
    <content type="html"><![CDATA[<h2 id="一、JSP入门"><a href="#一、JSP入门" class="headerlink" title="一、JSP入门"></a>一、<code>JSP</code>入门</h2><h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="#1.1、概述"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_1-1%E3%80%81%E6%A6%82%E8%BF%B0">#</a>1.1、概述</h3><h4 id="1-1-1、什么是JSP"><a href="#1-1-1、什么是JSP" class="headerlink" title="#1.1.1、什么是JSP"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_1-1-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFjsp">#</a>1.1.1、什么是<code>JSP</code></h4><blockquote><p><code>JSP（Java Server Pages）</code>是<code>JavaWeb</code>服务器端的<strong>动态资源</strong>。它与<code>HTML</code>页面的作用是相同的，显示数据和获取数据。</p></blockquote><h4 id="1-1-2、JSP组成"><a href="#1-1-2、JSP组成" class="headerlink" title="#1.1.2、JSP组成"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_1-1-2%E3%80%81jsp%E7%BB%84%E6%88%90">#</a>1.1.2、<code>JSP</code>组成</h4><blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">JSP</span>=HTML+Java脚本+JSP动作标签(包含EL表达式)<br></code></pre></td></tr></table></figure></blockquote><h3 id="1-2、JSP脚本"><a href="#1-2、JSP脚本" class="headerlink" title="#1.2、JSP脚本"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_1-2%E3%80%81jsp%E8%84%9A%E6%9C%AC">#</a>1.2、<code>JSP</code>脚本</h3><blockquote><p>本质上就是<code>Java</code>代码片段</p><p>分类：</p><ul><li><code>&lt;%...%&gt;</code>：Java语句</li><li><code>&lt;%=…%&gt;</code>：Java表达式<code>out.print(...);</code></li><li><code>&lt;%!...%&gt;</code>：Java定义类成员</li></ul><p>内置对象（无需创建就可以使用的对象）：</p><ul><li><code>out</code>对象在<code>JSP</code>页面中无需创建就可以使用，它的作用是用来向客户端输出；</li><li><code>&lt;%=…%&gt;</code>与<code>out.print()</code>功能是相同的，它们都是向客户端输出。</li></ul></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;jsptest&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;JSP演示&lt;/h1&gt;<br>    &lt;%<br>        <span class="hljs-comment">// Java语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello jsp&quot;</span>;<br>        <span class="hljs-comment">// 不会输出到客户端，而是在服务器端的控制台打印</span><br>        System.out.println(s1);<br>    %&gt;<br>    &lt;!-- 输出到客户端浏览器上 --&gt;<br>    输出变量：&lt;%=s1 %&gt;&lt;br/&gt;<br>    输出<span class="hljs-type">int</span>类型常量：&lt;%=<span class="hljs-number">100</span> %&gt;&lt;br/&gt;<br>    输出String类型常量：&lt;%=<span class="hljs-string">&quot;你好&quot;</span> %&gt;&lt;br/&gt;<br>    使用HTML直接输出常量&lt;span&gt;<span class="hljs-number">100</span>&lt;/span&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>在一个<code>JSP</code>中多个<code>&lt;%...%&gt;</code>可以一起使用</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;jsp表格&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;表格&lt;/h1&gt;<br>    &lt;table border=<span class="hljs-string">&quot;1&quot;</span> width=<span class="hljs-string">&quot;50%&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;序号&lt;/th&gt;<br>            &lt;th&gt;用户名&lt;/th&gt;<br>            &lt;th&gt;密码&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &lt;%<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        %&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;%=i+<span class="hljs-number">1</span> %&gt;&lt;/td&gt;<br>                &lt;td&gt;user&lt;%=i %&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%=<span class="hljs-number">100</span>+<span class="hljs-number">1</span> %&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;%<br>        &#125;<br>        %&gt;<br>    &lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3、JSP原理"><a href="#1-3、JSP原理" class="headerlink" title="#1.3、JSP原理"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_1-3%E3%80%81jsp%E5%8E%9F%E7%90%86">#</a>1.3、<code>JSP</code>原理</h3><blockquote><p><code>JSP</code>是特殊的<code>Servlet</code>（查看编译后的<code>JSP</code>源码）类，当<code>JSP</code>页面首次被访问时，容器（<code>Tomcat</code>）会先把<code>JSP</code>编译成<code>Servlet</code>，然后再去执行<code>Servlet</code>。所以<code>JSP</code>其实就是一个<code>Servlet</code>。</p></blockquote><p><img src="https://study.code2048.tech/assets/JSP%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-e094582c.png" alt="JSP实现原理"></p><blockquote><p><code>JSP</code>生成的<code>Servlet</code>存放在<code>tomcat</code>的<code>work</code>目录下，它是<code>JSP</code>的“真身”。我们打开看看其中的内容，了解一下<code>JSP</code>的“真身”。</p><p>你会发现，在<code>JSP</code>中的静态信息（例如<code>&lt;html&gt;</code>等）在“真身”中都是使用<code>out.write()</code>完成打印！这些静态信息都是作为字符串输出给了客户端。</p></blockquote><h3 id="1-4、JSP注释"><a href="#1-4、JSP注释" class="headerlink" title="#1.4、JSP注释"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_1-4%E3%80%81jsp%E6%B3%A8%E9%87%8A">#</a>1.4、JSP注释</h3><blockquote><p><code>&lt;%-- ... --%&gt;</code>， 在JSP编译成<code>.java</code>时会被忽略的，即JSP注释。 可以在JSP页面中使用html注释：<code>&lt;!-- … --&gt;</code>，但这个注释在JSP编译成的.java中是存在的，它不会被忽略，而且会被发送到客户端浏览器。</p></blockquote><h2 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="#二、Cookie"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#%E4%BA%8C%E3%80%81cookie">#</a>二、<code>Cookie</code></h2><h3 id="2-1、什么是Cookie"><a href="#2-1、什么是Cookie" class="headerlink" title="#2.1、什么是Cookie"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_2-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFcookie">#</a>2.1、什么是<code>Cookie</code></h3><blockquote><p><code>Cookie</code>翻译成中文是小甜点，小饼干的意思。在HTTP中它表示服务器送给客户端浏览器的小甜点。</p><p><code>Cookie</code>是在浏览器访问<code>Web</code>服务器的某个资源时，由<code>Web</code>服务器在<code>HTTP</code>响应消息头中附带传送给浏览器的一小段数据。一旦<code>Web</code>浏览器保存了某个<code>Cookie</code>，那么它在以后每次访问该<code>Web</code>服务器时，都应在<code>HTTP</code>请求头中将这个<code>Cookie</code>回传给<code>Web</code>服务器。一个<code>Cookie</code>主要由标识该信息的名称（<code>name</code>）和值（<code>value</code>）组成。</p></blockquote><p><img src="https://study.code2048.tech/assets/cookie%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-da803554.png" alt="cookie工作原理"></p><h3 id="2-2、Cookie规范"><a href="#2-2、Cookie规范" class="headerlink" title="#2.2、Cookie规范"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_2-2%E3%80%81cookie%E8%A7%84%E8%8C%83">#</a>2.2、<code>Cookie</code>规范</h3><blockquote><p><code>Cookie</code>大小上限为<code>4KB</code>；</p><p>一个服务器最多在客户端浏览器上保存<code>20</code>个<code>Cookie</code>；</p><p>一个浏览器最多保存<code>300</code>个<code>Cookie</code>；</p><p>上面的数据只是<code>HTTP</code>的<code>Cookie</code>规范，但在浏览器大战的今天，一些浏览器为了打败对手，为了展现自己的能力起见，可能对<code>Cookie</code>规范“扩展”了一些，例如每个<code>Cooki</code>e的大小为<code>8KB</code>，最多可保存<code>500</code>个<code>Cookie</code>等！但也不会出现把你硬盘占满的可能！</p><p>注意，不同浏览器之间是不共享<code>Cookie</code>的。也就是说在你使用IE访问服务器时，服务器会把<code>Cookie</code>发给<code>IE</code>，然后由<code>IE</code>保存起来，当你在使用<code>FireFox</code>访问服务器时，不可能把<code>IE</code>保存的<code>Cookie</code>发送给服务器。</p></blockquote><h3 id="2-3、关于Cookie的操作"><a href="#2-3、关于Cookie的操作" class="headerlink" title="#2.3、关于Cookie的操作"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_2-3%E3%80%81%E5%85%B3%E4%BA%8Ecookie%E7%9A%84%E6%93%8D%E4%BD%9C">#</a>2.3、关于<code>Cookie</code>的操作</h3><h4 id="2-3-1、创建Cookie"><a href="#2-3-1、创建Cookie" class="headerlink" title="#2.3.1、创建Cookie"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_2-3-1%E3%80%81%E5%88%9B%E5%BB%BAcookie">#</a>2.3.1、创建<code>Cookie</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建Cookie</span><br>Cookie ck=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>ck.setMaxAge(-<span class="hljs-number">1</span>);<span class="hljs-comment">//内存存储，取值有三种：&gt;0有效期，单位秒；=0浏览器关闭；&lt;0内存存储,默认-1</span><br>response.addCookie(ck);<span class="hljs-comment">//添加到response对象中，响应时发送给客户端</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2、获取Cookie"><a href="#2-3-2、获取Cookie" class="headerlink" title="#2.3.2、获取Cookie"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_2-3-2%E3%80%81%E8%8E%B7%E5%8F%96cookie">#</a>2.3.2、获取<code>Cookie</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取所有的Cookie</span><br>Cookie[] cks=request.getCookies();<br><span class="hljs-comment">//遍历Cookie</span><br><span class="hljs-keyword">for</span>(Cookie ck:cks)&#123;<br>    <span class="hljs-comment">//检索出自己的Cookie</span><br>    <span class="hljs-keyword">if</span>(ck.getName().equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>        <span class="hljs-comment">//记录Cookie的值</span><br>        code=ck.getValue();<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-3、修改Cookie"><a href="#2-3-3、修改Cookie" class="headerlink" title="#2.3.3、修改Cookie"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_2-3-3%E3%80%81%E4%BF%AE%E6%94%B9cookie">#</a>2.3.3、修改<code>Cookie</code></h4><blockquote><p>只需要保证<code>Cookie</code>的名和路径一致即可修改</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改Cookie</span><br>Cookie ck=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>);<br>ck.setMaxAge(-<span class="hljs-number">1</span>);<span class="hljs-comment">//内存存储，取值有三种：&gt;0有效期，单位秒；=0失效；&lt;0内存存储</span><br>response.addCookie(ck);<span class="hljs-comment">//让浏览器添加Cookie</span><br></code></pre></td></tr></table></figure><h4 id="2-3-4、Cookie的生命"><a href="#2-3-4、Cookie的生命" class="headerlink" title="#2.3.4、Cookie的生命"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_2-3-4%E3%80%81cookie%E7%9A%84%E7%94%9F%E5%91%BD">#</a>2.3.4、<code>Cookie</code>的生命</h4><blockquote><p><code>Cookie</code>不只有<code>name</code>和<code>value</code>，<code>Cookie</code>还是生命。所谓生命就是<code>Cookie</code>在客户端的有效时间，可以通过<code>setMaxAge(int)</code>来设置<code>Cookie</code>的有效时间。</p><ul><li><code>cookie.setMaxAge(-1)</code>：<code>Cookie</code>的<code>maxAge</code>属性的默认值就是<code>-1</code>，表示只在浏览器内存中存活。一旦关闭浏览器窗口，那么<code>Cookie</code>就会消失。</li><li><code>cookie.setMaxAge(60*60)</code>：表示<code>Cookie</code>对象可存活1小时。当生命大于0时，浏览器会把<code>Cookie</code>保存到硬盘上，就算关闭浏览器，就算重启客户端电脑，<code>Cookie</code>也会存活1小时；</li><li><code>cookie.setMaxAge(0)</code>：<code>Cookie</code>生命等于0是一个特殊的值，它表示<code>Cookie</code>被作废！也就是说，如果原来浏览器已经保存了这个<code>Cookie</code>，那么可以通过<code>Cookie</code>的<code>setMaxAge(0)</code>来删除这个<code>Cookie</code>。无论是在浏览器内存中，还是在客户端硬盘上都会删除这个<code>Cookie</code>。</li></ul><p>案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置Cookie</span><br><span class="hljs-meta">@WebServlet(name = &quot;AServlet&quot;, value = &quot;/AServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置Cookie</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>        <span class="hljs-comment">//设置Cookie的超时时间 -1表示一旦关闭浏览器窗口，那么cookie就会消失</span><br>        cookie.setMaxAge(-<span class="hljs-number">1</span>);<br>        response.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取Cookie</span><br><span class="hljs-meta">@WebServlet(name = &quot;BServlet&quot;, value = &quot;/BServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        Cookie[] cks = request.getCookies();<br>        <span class="hljs-keyword">for</span> (Cookie ck : cks) &#123;<br>            <span class="hljs-keyword">if</span>(ck.getName().equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                <span class="hljs-comment">//获取Cookie的值</span><br>                System.out.println(ck.getValue());<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、Session"><a href="#三、Session" class="headerlink" title="#三、Session"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#%E4%B8%89%E3%80%81session">#</a>三、<code>Session</code></h2><h3 id="3-1、什么是Session"><a href="#3-1、什么是Session" class="headerlink" title="#3.1、什么是Session"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFsession">#</a>3.1、什么是<code>Session</code></h3><blockquote><p>关于会话：</p><ul><li>会话范围是某个用户从首次访问服务器开始，到该用户关闭浏览器结束；</li><li>一个用户对服务器的多次连贯性请求！所谓连贯性请求，就是该用户多次请求中间没有关闭浏览器；</li><li>类似生活中的对话。</li></ul><p><code>javax.servlet.http.HttpSession</code>接口表示一个会话，是<code>Java Web</code>提供的。</p><p><code>Session</code>是服务器端对象，保存在服务器端。</p></blockquote><h3 id="3-2、获取Session"><a href="#3-2、获取Session" class="headerlink" title="#3.2、获取Session"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-2%E3%80%81%E8%8E%B7%E5%8F%96session">#</a>3.2、获取<code>Session</code></h3><blockquote><p><code>HttpSession request.getSesssion()</code>：如果当前会话已经有了<code>Session</code>对象那么直接返回，如果当前会话还不存在会话，那么创建<code>Session</code>并返回； <code>JSP</code>中得到<code>Session</code>对象：<code>Session</code>是<code>JSP</code>内置对象之一，不用创建就可以直接使用。</p></blockquote><h3 id="3-3、HttpSession域对象功能"><a href="#3-3、HttpSession域对象功能" class="headerlink" title="#3.3、HttpSession域对象功能"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-3%E3%80%81httpsession%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%8A%9F%E8%83%BD">#</a>3.3、<code>HttpSession</code>域对象功能</h3><blockquote><p>一个会话创建一个<code>HttpSession</code>对象，同一会话中的多个请求中可以共享<code>Session</code>中的数据</p><p>目前为止已经学习了三个域对象，分别是<code>request</code>、<code>session</code>、<code>servletContext</code>，他们都有共同的方法：</p><ul><li><code>void setAttribute(String name, Object value)</code></li><li><code>Object getAttribute(String name)</code></li><li><code>void removeAttribute(String name)</code></li></ul><p>如果用户需要在会话范围之内共享数据，应该将数据保存在<code>session</code>中。</p><p>案例，演示<code>session</code>中会话的多次请求中共享数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;CServlet&quot;, value = &quot;/CServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取Session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-comment">//在Session域中存放数据</span><br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@WebServlet(name = &quot;DServlet&quot;, value = &quot;/DServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取Session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-comment">//从Session域中获取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String)session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4、登录案例"><a href="#3-4、登录案例" class="headerlink" title="#3.4、登录案例"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-4%E3%80%81%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B">#</a>3.4、登录案例</h3><blockquote><p><code>login.jsp</code>：提供登录表单，提交表单请求到&#96;LoginServlet&#96;&#96;</p><p>&#96;&#96;LoginServlet&#96;：获取请求参数，校验用户是否登录成功</p><ul><li>失败：跳转到登录页面，显示错误信息</li><li>成功：跳转到成功页，显示“欢迎xxx”的提示信息</li></ul><p><code>success.jsp</code>：登录成功页面，显示欢迎信息，关闭浏览器后，直接访问登录页会提示登录</p><p><code>LoginServlet</code>代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;LoginServlet&quot;, value = &quot;/LoginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(username.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br>            <span class="hljs-comment">//登录成功</span><br>            <span class="hljs-comment">//保存数据到Session</span><br>            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>            session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(request, response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//登录失败信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;用户名或密码错误&quot;</span>;<br>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, msg);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request, response);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>login.jsp</code>代码</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Login&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> (String)request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br>    <span class="hljs-keyword">if</span>(msg != <span class="hljs-literal">null</span>) &#123;<br>%&gt;<br>    &lt;p style=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;&lt;%=msg %&gt;&lt;/p&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br>&lt;form action=<span class="hljs-string">&quot;&lt;%=request.getContextPath() %&gt;/LoginServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;fieldset style=<span class="hljs-string">&quot;width: 300px;&quot;</span>&gt;<br>        &lt;legend&gt;用户登录&lt;/legend&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;账号&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;请输入用户名&quot;</span> /&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;密码&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;button type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;<br>            &lt;button type=<span class="hljs-string">&quot;reset&quot;</span>&gt;重置&lt;/button&gt;<br>        &lt;/p&gt;<br>    &lt;/fieldset&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p><code>success.jsp</code>代码</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;success&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-keyword">if</span>(username != <span class="hljs-literal">null</span>) &#123;<br>%&gt;<br>        &lt;p&gt;欢迎&lt;%=username %&gt;&lt;/p&gt;<br>&lt;%<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>%&gt;<br>        &lt;p&gt;请先登录&lt;/p&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="3-5、Session原理"><a href="#3-5、Session原理" class="headerlink" title="#3.5、Session原理"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-5%E3%80%81session%E5%8E%9F%E7%90%86">#</a>3.5、<code>Session</code>原理</h3><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">Session`底层依赖`Cookie<br></code></pre></td></tr></table></figure><ol><li>当用户第一次使用<code>session</code>时（表示第一次请求服务器），服务器会创建<code>session</code>，并创建一个<code>Cookie</code>，在<code>Cookie</code>中保存了<code>session</code>的<code>id</code>，发送给客户端。这样客户端就有了自己<code>session</code>的<code>id</code>了。但这个<code>Cookie</code>只在浏览器内存中存在，也就是说，在关闭浏览器窗口后，<code>Cookie</code>就会丢失，也就丢失了<code>sessionId</code>；</li><li>当用户第二次访问服务器时，会在请求中把保存了<code>sessionId</code>的<code>Cookie</code>发送给服务器，服务器通过<code>sessionId</code>查找<code>session</code>对象，然后再使用。也就是说，只要浏览器容器不关闭，无论访问服务器多少次，使用的都是同一个<code>session</code>对象。这样也就可以让多个请求共享同一个<code>session</code>了；</li><li>当用户关闭了浏览器窗口后，再打开浏览器访问服务器，这时请求中没有了<code>sessionId</code>，那么服务器会创建一个<code>session</code>，再把<code>sessionId</code>通过<code>Cookie</code>保存到浏览器中，也是一个新的会话开始了。原来的<code>session</code>会因为长时间无法访问而失效；</li><li>当用户打开某个服务器页面长时间没动作时，这样<code>session</code>会超时失效，当用户再有活动时，服务器通过用户提供的<code>sessionId</code>已经找不到<code>session</code>对象了，那么服务器还是会创建一个新的<code>session</code>对象，再把新的<code>sessionId</code>保存到客户端。这也是一个新的会话开始了。</li></ol></blockquote><h3 id="3-6、Session其他API"><a href="#3-6、Session其他API" class="headerlink" title="#3.6、Session其他API"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-6%E3%80%81session%E5%85%B6%E4%BB%96api">#</a>3.6、<code>Session</code>其他<code>API</code></h3><blockquote><p><code>String getId()</code>：获取<code>sessionId</code>；</p><p><code>int getMaxInactiveInterval()</code>：获取<code>session</code>可以的最大不活动时间（秒），默认为30分钟。当<code>session</code>在30分钟内没有使用，那么<code>Tomcat</code>会在<code>session</code>池中移除这个<code>session</code>；</p><p><code>void setMaxInactiveInterval(int interval)</code>：设置<code>session</code>允许的最大不活动时间（秒），如果设置为1秒，那么只要<code>session</code>在1秒内不被使用，那么<code>session</code>就会被移除；</p><p><code>long getCreationTime()</code>：返回<code>session</code>的创建时间，返回值为当前时间的毫秒值；</p><p><code>long getLastAccessedTime()</code>：返回<code>session</code>的最后活动时间，返回值为当前时间的毫秒值；</p><p><code>void invalidate()</code>：让<code>session</code>失效！调用这个方法会被<code>session</code>失效，当<code>session</code>失效后，客户端再次请求，服务器会给客户端创建一个新的<code>session</code>，并在响应中给客户端新<code>session</code>的<code>sessionId</code>；</p><p><code>boolean isNew()</code>：查看<code>session</code>是否为新。当客户端第一次请求时，服务器为客户端创建<code>session</code>，但这时服务器还没有响应客户端，也就是还没有把<code>sessionId</code>响应给客户端时，这时<code>session</code>的状态为新。</p><p>修改<code>LoginServlet</code>，体会<code>Session</code>超时时间及<code>Session</code>失效</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(name = &quot;LoginServlet&quot;, value = &quot;/LoginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(username.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br>            <span class="hljs-comment">//登录成功</span><br>            <span class="hljs-comment">//保存数据到Session</span><br>            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>            session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>            <span class="hljs-comment">//设置Session超时时间为1s</span><br>            session.setMaxInactiveInterval(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//延时2000ms,模拟Session超时</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//设置Session失效</span><br>            <span class="hljs-comment">//session.invalidate();</span><br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(request, response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//登录失败信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;用户名或密码错误&quot;</span>;<br>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, msg);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request, response);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>修改登录案例，增加退出功能</p><p>用于退出登录的<code>Servlet</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(name = &quot;LogoutServlet&quot;, value = &quot;/LogoutServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogoutServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置Session失效</span><br>        request.getSession().invalidate();<br>        <span class="hljs-comment">//跳转到登录页</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request, response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>修改<code>success.jsp</code></p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;success&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-keyword">if</span>(username != <span class="hljs-literal">null</span>) &#123;<br>%&gt;<br>        &lt;p&gt;欢迎&lt;%=username %&gt;&lt;/p&gt;<br>        &lt;p&gt;&lt;a href=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/LogoutServlet&quot;</span>&gt;退出&lt;/a&gt;&lt;/p&gt;<br>&lt;%<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>%&gt;<br>        &lt;p&gt;请先登录&lt;/p&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="3-7、Session实战保存验证码"><a href="#3-7、Session实战保存验证码" class="headerlink" title="#3.7、Session实战保存验证码"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-7%E3%80%81session%E5%AE%9E%E6%88%98%E4%BF%9D%E5%AD%98%E9%AA%8C%E8%AF%81%E7%A0%81">#</a>3.7、<code>Session</code>实战保存验证码</h3><blockquote><p>在我们注册时，如果没有验证码的话，我们可以使用<code>URLConnection</code>来写一段代码发出注册请求。甚至可以使用<code>while(true)</code>来注册！那么服务器就废了！</p><p>验证码可以去识别发出请求的是人还是程序！当然，如果聪明的程序可以去分析验证码图片！但分析图片也不是一件容易的事，因为一般验证码图片都会带有干扰线，人都看不清，那么程序一定分析不出来。</p></blockquote><h4 id="3-7-1、测试生成验证码"><a href="#3-7-1、测试生成验证码" class="headerlink" title="#3.7.1、测试生成验证码"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-7-1%E3%80%81%E6%B5%8B%E8%AF%95%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81">#</a>3.7.1、测试生成验证码</h4><blockquote><p>在项目中导入<code>ValidateCode.jar</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.dsna.util.images.ValidateCode;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//生成验证码</span><br>        ValidateCode vc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidateCode</span>(<span class="hljs-number">200</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//获取验证码对应的文字</span><br>        String code=vc.getCode();<br>        System.out.println(code);<br>        <span class="hljs-comment">// 保存图片</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:/code_img.jpg&quot;</span>);<br>        vc.write(out);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行完成后可以在D盘下看到验证码图片。</p></blockquote><h4 id="3-7-2、修改登录案例"><a href="#3-7-2、修改登录案例" class="headerlink" title="#3.7.2、修改登录案例"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-7-2%E3%80%81%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B">#</a>3.7.2、修改登录案例</h4><blockquote><p>增加生成验证码的<code>Servlet</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.dsna.util.images.ValidateCode;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(name = &quot;CodeServlet&quot;, value = &quot;/CodeServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//生成验证码</span><br>        <span class="hljs-type">ValidateCode</span> <span class="hljs-variable">vc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidateCode</span>(<span class="hljs-number">150</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sysCode</span> <span class="hljs-operator">=</span> vc.getCode();<br>        System.out.println(sysCode);<br><br>        <span class="hljs-comment">//在Session中存储验证码</span><br>        request.getSession().setAttribute(<span class="hljs-string">&quot;sysCode&quot;</span>, sysCode);<br>        <span class="hljs-comment">//将验证码响应给用户</span><br>        vc.write(response.getOutputStream());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>修改登录页面</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Login&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> (String)request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br>    <span class="hljs-keyword">if</span>(msg != <span class="hljs-literal">null</span>) &#123;<br>%&gt;<br>    &lt;p style=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;&lt;%=msg %&gt;&lt;/p&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br>&lt;form action=<span class="hljs-string">&quot;&lt;%=request.getContextPath() %&gt;/LoginServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;fieldset style=<span class="hljs-string">&quot;width: 300px;&quot;</span>&gt;<br>        &lt;legend&gt;用户登录&lt;/legend&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;账号&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;请输入用户名&quot;</span> /&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;密码&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;验证码&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;code&quot;</span> placeholder=<span class="hljs-string">&quot;请输入验证码&quot;</span> /&gt;<br>            &lt;img src=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/CodeServlet&quot;</span> alt=<span class="hljs-string">&quot;验证码&quot;</span>&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;button type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;<br>            &lt;button type=<span class="hljs-string">&quot;reset&quot;</span>&gt;重置&lt;/button&gt;<br>        &lt;/p&gt;<br>    &lt;/fieldset&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>修改<code>LoginServlet</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(name = &quot;LoginServlet&quot;, value = &quot;/LoginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br><br>        <span class="hljs-comment">//获取Session中的Code</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sysCode</span> <span class="hljs-operator">=</span> (String)session.getAttribute(<span class="hljs-string">&quot;sysCode&quot;</span>);<br>        <span class="hljs-keyword">if</span>(sysCode.equalsIgnoreCase(code)) &#123;<br>            <span class="hljs-keyword">if</span>(username.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br>                session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>                request.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(request, response);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//登录失败信息</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;用户名或密码错误&quot;</span>;<br>                request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, msg);<br>                request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request, response);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;验证码输入错误&quot;</span>;<br>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, msg);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request, response);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-7-3、单击刷新验证码"><a href="#3-7-3、单击刷新验证码" class="headerlink" title="#3.7.3、单击刷新验证码"></a><a href="https://study.code2048.tech/JavaWeb/03_JSP%E5%85%A5%E9%97%A8_Cookie_Session.html#_3-7-3%E3%80%81%E5%8D%95%E5%87%BB%E5%88%B7%E6%96%B0%E9%AA%8C%E8%AF%81%E7%A0%81">#</a>3.7.3、单击刷新验证码</h4><blockquote><p>在项目中引入<code>jQuery</code>，修改登录页面</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;登录&lt;/title&gt;<br>    &lt;script src=<span class="hljs-string">&quot;&lt;%=request.getContextPath() %&gt;/js/jquery-3.4.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        $(function () &#123;<br>            $(<span class="hljs-string">&quot;#codeImg&quot;</span>).click(function () &#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>                $(<span class="hljs-string">&quot;#codeImg&quot;</span>).prop(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;&lt;%=request.getContextPath() %&gt;/CodeServlet?timeStamp=&quot;</span> + date.getTime());<br>            &#125;);<br>        &#125;);<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">errorMsg</span> <span class="hljs-operator">=</span> (String)request.getAttribute(<span class="hljs-string">&quot;errorMsg&quot;</span>);<br>    <span class="hljs-keyword">if</span>(errorMsg != <span class="hljs-literal">null</span>) &#123;<br>%&gt;<br>    &lt;p style=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;&lt;%=errorMsg %&gt;&lt;/p&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br>&lt;form action=<span class="hljs-string">&quot;&lt;%=request.getContextPath() %&gt;/LoginServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;fieldset style=<span class="hljs-string">&quot;width: 300px;&quot;</span>&gt;<br>        &lt;legend&gt;用户登录&lt;/legend&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;账号&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;请输入用户名&quot;</span> /&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;密码&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;label&gt;验证码&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;code&quot;</span> placeholder=<span class="hljs-string">&quot;请输入验证码&quot;</span> /&gt;<br>            &lt;img id=<span class="hljs-string">&quot;codeImg&quot;</span> src=<span class="hljs-string">&quot;&lt;%=request.getContextPath() %&gt;/CodeServlet&quot;</span> alt=<span class="hljs-string">&quot;验证码&quot;</span> /&gt;<br>        &lt;/p&gt;<br>        &lt;p&gt;<br>            &lt;button type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;<br>            &lt;button type=<span class="hljs-string">&quot;reset&quot;</span>&gt;重置&lt;/button&gt;<br>        &lt;/p&gt;<br>    &lt;/fieldset&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>No appropriate protocol</title>
    <link href="/2023/10/21/No-appropriate-protocol/"/>
    <url>/2023/10/21/No-appropriate-protocol/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>synchronized</title>
    <link href="/2023/10/19/synchronized/"/>
    <url>/2023/10/19/synchronized/</url>
    
    <content type="html"><![CDATA[<h3 id="1-多线程中-synchronized-锁升级的原理是什么？"><a href="#1-多线程中-synchronized-锁升级的原理是什么？" class="headerlink" title="1. 多线程中 synchronized 锁升级的原理是什么？"></a>1. 多线程中 synchronized 锁升级的原理是什么？</h3><p>synchronized 锁升级原理：在锁对象的对象头里面有一个 threadid 字段，在第一次访问的时候 threadid 为空，<a href="https://link.zhihu.com/?target=https://so.csdn.net/so/search?q=jvm&spm=1001.2101.3001.7020">jvm</a> 让其持有偏向锁，并将 threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否与其线程 id 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁，此过程就构成了 synchronized 锁的升级。</p><p>锁的升级的目的：锁升级是为了减低了锁带来的性能消耗。在 Java 6 之后优化 synchronized 的实现方式，使用了偏向锁升级为轻量级锁再升级到重量级锁的方式，从而减低了锁带来的性能消耗。</p><h3 id="2-什么是死锁？"><a href="#2-什么是死锁？" class="headerlink" title="2. 什么是死锁？"></a>2. 什么是死锁？</h3><p>当线程 A 持有独占锁a，并尝试去获取独占锁 b 的同时，线程 B 持有独占锁 b，并尝试获取独占锁 a 的情况下，就会发生 AB 两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。</p><h3 id="3-怎么防止死锁？"><a href="#3-怎么防止死锁？" class="headerlink" title="3. 怎么防止死锁？"></a>3. 怎么防止死锁？</h3><ul><li>尽量使用 tryLock(long timeout, TimeUnit unit)的方法(ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁。</li><li>尽量使用 Java. util. concurrent 并发类代替自己手写锁。</li><li>尽量降低锁的使用粒度，尽量不要几个功能用同一把锁。</li><li>尽量减少同步的代码块。</li></ul><h3 id="4-ThreadLocal-是什么？有哪些使用场景？"><a href="#4-ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="4. ThreadLocal 是什么？有哪些使用场景？"></a>4. ThreadLocal 是什么？有哪些使用场景？</h3><p>ThreadLocal 为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p><p>ThreadLocal 的经典使用场景是数据库连接和 session 管理等。</p><h3 id="5-说一下-synchronized-底层实现原理？"><a href="#5-说一下-synchronized-底层实现原理？" class="headerlink" title="5. 说一下 synchronized 底层实现原理？"></a>5. 说一下 synchronized 底层实现原理？</h3><p>synchronized 是由一对 monitorenter&#x2F;monitorexit 指令实现的，monitor 对象是同步的基本实现单元。在 Java 6 之前，monitor 的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作，性能也很低。但在 Java 6 的时候，Java 虚拟机 对此进行了大刀阔斧地改进，提供了三种不同的 monitor 实现，也就是常说的三种不同的锁：偏向锁（Biased Locking）、轻量级锁和重量级锁，大大改进了其性能。</p><h3 id="6-synchronized-和-volatile-的区别是什么？"><a href="#6-synchronized-和-volatile-的区别是什么？" class="headerlink" title="6. synchronized 和 volatile 的区别是什么？"></a>6. synchronized 和 volatile 的区别是什么？</h3><ul><li>volatile 是变量修饰符；synchronized 是修饰类、方法、代码段。</li><li>volatile 仅能实现变量的修改可见性，不能保证原子性；而 synchronized 则可以保证变量的修改可见性和原子性。</li><li>volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。</li></ul><h3 id="7-synchronized-和-Lock-有什么区别？"><a href="#7-synchronized-和-Lock-有什么区别？" class="headerlink" title="7. synchronized 和 Lock 有什么区别？"></a>7. synchronized 和 Lock 有什么区别？</h3><ul><li>synchronized 可以给类、方法、代码块加锁；而 lock 只能给代码块加锁。</li><li>synchronized 不需要手动获取锁和释放锁，使用简单，发生异常会自动释放锁，不会造成死锁；而 lock 需要自己加锁和释放锁，如果使用不当没有 unLock()去释放锁就会造成死锁。</li><li>通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</li></ul><h3 id="8-synchronized-和-ReentrantLock-区别是什么？"><a href="#8-synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="8. synchronized 和 ReentrantLock 区别是什么？"></a>8. synchronized 和 ReentrantLock 区别是什么？</h3><p>synchronized 早期的实现比较低效，对比 ReentrantLock，大多数场景性能都相差较大，但是在 Java 6 中对 synchronized 进行了非常多的改进。</p><p>主要区别如下：</p><ul><li>ReentrantLock 使用起来比较灵活，但是必须有释放锁的配合动作；</li><li>ReentrantLock 必须手动获取与释放锁，而 synchronized 不需要手动释放和开启锁；</li><li>ReentrantLock 只适用于代码块锁，而 synchronized 可用于修饰方法、代码块等。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Iterator</title>
    <link href="/2023/10/19/Iterator/"/>
    <url>/2023/10/19/Iterator/</url>
    
    <content type="html"><![CDATA[<h3 id="1-迭代器-Iterator-是什么？"><a href="#1-迭代器-Iterator-是什么？" class="headerlink" title="1. 迭代器 Iterator 是什么？"></a>1. 迭代器 Iterator 是什么？</h3><p>Iterator 接口提供遍历任何 Collection 的接口。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java 集合<a href="https://link.zhihu.com/?target=https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">框架</a>中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。</p><h3 id="2-Iterator-怎么使用？有什么特点？"><a href="#2-Iterator-怎么使用？有什么特点？" class="headerlink" title="2. Iterator 怎么使用？有什么特点？"></a>2. Iterator 怎么使用？有什么特点？</h3><p>Iterator 使用代码如下：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">List&lt;<span class="hljs-type">String</span>&gt; list = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br><br><br><span class="hljs-keyword">Iterator</span>&lt;<span class="hljs-type">String</span>&gt; it = list. <span class="hljs-keyword">iterator</span>();<br><br><br><br><br><span class="hljs-type">String</span> obj = it. <span class="hljs-keyword">next</span>();<br><br><br>System. out. println(obj);<br></code></pre></td></tr></table></figure><p>Iterator 的特点是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 ConcurrentModificationException 异常。</p><h3 id="3-Iterator-和-ListIterator-有什么区别？"><a href="#3-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="3. Iterator 和 ListIterator 有什么区别？"></a>3. Iterator 和 ListIterator 有什么区别？</h3><ul><li>Iterator 可以遍历 Set 和 List 集合，而 ListIterator 只能遍历 List。</li><li>Iterator 只能单向遍历，而 ListIterator 可以双向遍历（向前&#x2F;后遍历）。</li><li>ListIterator 从 Iterator 接口继承，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBootApplication</title>
    <link href="/2023/10/16/SpringBootApplication/"/>
    <url>/2023/10/16/SpringBootApplication/</url>
    
    <content type="html"><![CDATA[<p><strong>@SpringBootApplication包含的三个注解及其含义</strong></p><p><strong>第一个：@SpringBootConfiguration（在这个类的源码中又有一个Configuration的注解）</strong></p><p>@Configuration这个注解的作用就是声明当前类是一个配置类，然后Spring会自动扫描到添加了@Configuration的类，读取其中的配置信息，而@SpringBootConfiguration是来声明当前类是SpringBoot应用的配置类，项目中只能有一个。所以一般我们无需自己添加。</p><p><strong>第二个：@EnableAutoConfiguration</strong></p><p>开启自动配置，告诉SpringBoot基于所添加的依赖，去“猜测”你想要如何配置Spring。比如我们引入了spring-boot-starter-web，而这个启动器中帮我们添加了tomcat、SpringMVC的依赖，此时自动配置就知道你是要开发一个web应用，所以就帮你完成了web及SpringMVC的默认配置了！我们使用SpringBoot构建一个项目，只需要引入所需框架的依赖，配置就可以交给SpringBoot处理了。</p><p><strong>第三个：@ComponentScan</strong></p><p>配置组件扫描的指令</p><p>提供了类似与<a href="context:component-scan">context:component-scan</a>标签的作用</p><p>通过basePackageClasses或者basePackages属性来指定要扫描的包。</p><p>如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包</p><p>而我们的@SpringBootApplication注解声明的类就是main函数所在的启动类，</p><p>因此扫描的包是该类所在包及其子包。因此，一般启动类会放在一个比较前的包目录中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>interceptor</title>
    <link href="/2023/10/15/interceptor/"/>
    <url>/2023/10/15/interceptor/</url>
    
    <content type="html"><![CDATA[<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> LoginInterceptor implements HandlerInterceptor &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> preHandle(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>)<br>            throws <span class="hljs-keyword">Exception</span> &#123;<br>        HttpSession <span class="hljs-keyword">session</span> = request.getSession();<br>        <span class="hljs-keyword">Object</span> <span class="hljs-keyword">admin</span> = <span class="hljs-keyword">session</span>.getAttribute(&quot;admin&quot;);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">admin</span> == <span class="hljs-keyword">null</span>) &#123;<br>            String <span class="hljs-keyword">header</span> = request.getHeader(&quot;X-Requested-With&quot;);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">header</span> != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">header</span>.equals(&quot;XMLHttpRequest&quot;)) &#123;<br>                ObjectMapper mapper = <span class="hljs-built_in">new</span> ObjectMapper();<br>                RespBean respBean = RespBean.error(&quot;请重新登录&quot;);<br>                mapper.writeValue(response.getOutputStream(),respBean);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                response.sendRedirect(request.getContextPath() + &quot;/&quot;);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后在WebConfig配置拦截器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//配置拦截器</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addInterceptors</span>(<span class="hljs-params">InterceptorRegistry registry</span>) &#123;<br>    registry.<span class="hljs-title function_">addInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>            .<span class="hljs-title function_">addPathPatterns</span>(<span class="hljs-string">&quot;/admin/**&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-1-过滤器Filter和拦截器Interceptor的区别"><a href="#1-1-过滤器Filter和拦截器Interceptor的区别" class="headerlink" title="1.1. *过滤器Filter和拦截器Interceptor的区别*"></a><strong>1.1.</strong> <em><strong>*过滤器Filter和拦截器Interceptor的区别*</strong></em></h2><p>过滤器 和 拦截器 均体现了AOP的编程思想，都可以实现诸如日志记录、登录鉴权等功能，但二者的不同点也是比较多的</p><p>1、 实现原理不同</p><p>过滤器 是基于函数回调的，拦截器 则是基于Java的反射机制（动态代理）实现的。</p><p>2、 使用范围不同</p><p>过滤器 实现的是 javax.servlet.Filter 接口，而这个接口是在Servlet规范中定义的，也就是说过滤器Filter 的使用要依赖于Tomcat等容器，导致它只能在web程序中使用。</p><p>拦截器(Interceptor) 它是一个Spring组件，并由Spring容器管理，并不依赖Tomcat等容器，是可以单独使用的。不仅能应用在web程序中，还可以使用在其他地方</p><p>3、 触发时机不同</p><p>过滤器 和 拦截器的触发时机也不同，我们看下边这张图。</p><p><img src="/images/interceptor.jpg" alt="img"> </p><p>执行顺序 ：过滤前 - 拦截前 - Controller处理 - 拦截后 - 过滤后</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
